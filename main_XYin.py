"""
main script that runs the XYwizard class functions on all input CSV files within
the "Nikon CAD inputs" subfolder.

Author: Sean Lin
Date Created: 7/26/21
Last Modified: 8/06/21
"""
from XYwizard import XYwizard
import shutil
import os
import pandas as pd
import csv

def generate_input_csv(data):
    """
    uses an instance of the XYwizard class to generate points on the wafer
    :param data: the pandas dataframe that the data will be read from
    :return: X and Y coordinates generated by XYwizard (2 lists), extension to append to output file name (string)
    """
    wiz = XYwizard()

    # extracting data from CSV file in the "Nikon CAD input" folder
    diam = data.iloc[:,0][0]
    xDim = data.iloc[:,1][0]
    yDim = data.iloc[:,2][0]
    iXCoord = data.iloc[:,3][0]
    iYCoord = data.iloc[:,4][0]
    steps = data.iloc[:,5]
    iCoords = [iXCoord, iYCoord]

    # generate a full set of input coordinates
    x, y = wiz.findXY(xDim, yDim, steps, iCoords)

    # samples the original dataset down to a user-input value
    trying = True  # boolean indicator for whether user is still trying values
    sampled_down = False # boolean indicator for whether data has been sampled down
    x_new, y_new = [], []
    file_extension = ""

    # while loop continues to iterate until user is satisfied with their plotted layout of sample points
    while trying == True:
        num_samples = input("\nWould you like data for the full wafer or a subsample? \n"
                       "Type \'f\' for full wafer \nOR\n"
                       "Type your desired sample size (recommended around 100) : ")
        if not(num_samples == 'f'):
            x_new, y_new = wiz.sample_down(x, y, int(num_samples))
            file_extension = '_sampled_down_' + str(num_samples) + '_Nikon_XYin'
            wiz.visual_verification(x_new, y_new, diam)
            sampled_down = True
        else:
            file_extension = '_Nikon_XYin'
            wiz.visual_verification(x, y, diam)
            sampled_down = False

        try_again = input("\nTry a different sample size? \n"
                              "\'y\' or \'n\' : ")
        trying = (try_again == 'y')

    # replacing the lists that cover the full wafer with the sampled-down lists
    if sampled_down:
        x, y = x_new, y_new

    # converting all coordinate units from microns to millimeters
    x = [i * 0.001 for i in x]
    y = [j * 0.001 for j in y]
    return x, y, file_extension

if __name__ == '__main__':
    home_dir = os.getcwd()
    CAD_input_dir = home_dir + "/CAD inputs"
    Nikon_ready_csvs = home_dir + "/Nikon ready CSVs"
    os.chdir(CAD_input_dir)
    for files in os.walk(CAD_input_dir):
        names = files[2]
        for name in names:
            assert name.endswith('.csv'), name + " is not a csv file"
            if not (name.__contains__("Nikon_XYin")):
                data = pd.read_csv(name)
                name = name[:len(name) - 4]
                data.name = name
                print("\n\n\n-- NOW DOWNSAMPLING " + data.name + " --")
                x, y, file_extension = generate_input_csv(data)
                if (os.path.isdir(Nikon_ready_csvs + "/" + name)):
                    shutil.rmtree(Nikon_ready_csvs + "/" + name)
                    os.mkdir(Nikon_ready_csvs + "/" + name)
                else:
                    os.mkdir(Nikon_ready_csvs + "/" + name)
                os.chdir(Nikon_ready_csvs + "/" + name)
                with open(name + file_extension + '.csv', 'w', newline="") as myfile:
                    wr = csv.writer(myfile, quoting=csv.QUOTE_ALL)
                    for i in range(len(x)):
                        wr.writerow([x[i], y[i]])
                print('CSV file \'' + name + file_extension + '.csv\' generated and ready for Nikons!')
            shutil.move(CAD_input_dir + "/" + name + ".csv", Nikon_ready_csvs + "/" + name)
            os.chdir(CAD_input_dir)
    input("Press \'enter\' to exit program")